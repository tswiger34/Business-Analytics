{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tswiger34/Business-Analytics/blob/main/Lab1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p_Yu45OYdj3Y"
      },
      "source": [
        "# Travis Swiger\n",
        "# IS 4487 Module 1 Script \n",
        "\n",
        "## Agenda\n",
        "\n",
        "- Loading installed packages\n",
        "- Inspect data\n",
        "- Explore plot types \n",
        "\n",
        "Make sure you have downloaded tonight's script and data from Canvas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UE93RwXhgiJS"
      },
      "source": [
        "##Load Libraries\n",
        "\n",
        "In this class we will be using \n",
        "- Pandas\n",
        "- Scikitlearn\n",
        "- Matplotlib\n",
        "\n",
        "We can pull sample data from \n",
        "- statsmodels.api"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JYRZY5n0gfNe"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib as mpl\n",
        "import sklearn as sl\n",
        "import statsmodels.api as sm"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bREaXo8jfu-O"
      },
      "source": [
        "## Getting data into Pandas\n",
        "\n",
        "In this case we will load data from the statsmodels.org library\n",
        "\n",
        "MTCARS is a traditional dataset used for learning.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6_FwprxVgR0e",
        "outputId": "7b9b84fb-98e0-48e0-d261-63e766b386ae"
      },
      "source": [
        "mtcars = sm.datasets.get_rdataset(\"mtcars\", \"datasets\", cache=True).data\n",
        "df = pd.DataFrame(mtcars)\n",
        "print(df)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                      mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  \\\n",
            "Mazda RX4            21.0    6  160.0  110  3.90  2.620  16.46   0   1     4   \n",
            "Mazda RX4 Wag        21.0    6  160.0  110  3.90  2.875  17.02   0   1     4   \n",
            "Datsun 710           22.8    4  108.0   93  3.85  2.320  18.61   1   1     4   \n",
            "Hornet 4 Drive       21.4    6  258.0  110  3.08  3.215  19.44   1   0     3   \n",
            "Hornet Sportabout    18.7    8  360.0  175  3.15  3.440  17.02   0   0     3   \n",
            "Valiant              18.1    6  225.0  105  2.76  3.460  20.22   1   0     3   \n",
            "Duster 360           14.3    8  360.0  245  3.21  3.570  15.84   0   0     3   \n",
            "Merc 240D            24.4    4  146.7   62  3.69  3.190  20.00   1   0     4   \n",
            "Merc 230             22.8    4  140.8   95  3.92  3.150  22.90   1   0     4   \n",
            "Merc 280             19.2    6  167.6  123  3.92  3.440  18.30   1   0     4   \n",
            "Merc 280C            17.8    6  167.6  123  3.92  3.440  18.90   1   0     4   \n",
            "Merc 450SE           16.4    8  275.8  180  3.07  4.070  17.40   0   0     3   \n",
            "Merc 450SL           17.3    8  275.8  180  3.07  3.730  17.60   0   0     3   \n",
            "Merc 450SLC          15.2    8  275.8  180  3.07  3.780  18.00   0   0     3   \n",
            "Cadillac Fleetwood   10.4    8  472.0  205  2.93  5.250  17.98   0   0     3   \n",
            "Lincoln Continental  10.4    8  460.0  215  3.00  5.424  17.82   0   0     3   \n",
            "Chrysler Imperial    14.7    8  440.0  230  3.23  5.345  17.42   0   0     3   \n",
            "Fiat 128             32.4    4   78.7   66  4.08  2.200  19.47   1   1     4   \n",
            "Honda Civic          30.4    4   75.7   52  4.93  1.615  18.52   1   1     4   \n",
            "Toyota Corolla       33.9    4   71.1   65  4.22  1.835  19.90   1   1     4   \n",
            "Toyota Corona        21.5    4  120.1   97  3.70  2.465  20.01   1   0     3   \n",
            "Dodge Challenger     15.5    8  318.0  150  2.76  3.520  16.87   0   0     3   \n",
            "AMC Javelin          15.2    8  304.0  150  3.15  3.435  17.30   0   0     3   \n",
            "Camaro Z28           13.3    8  350.0  245  3.73  3.840  15.41   0   0     3   \n",
            "Pontiac Firebird     19.2    8  400.0  175  3.08  3.845  17.05   0   0     3   \n",
            "Fiat X1-9            27.3    4   79.0   66  4.08  1.935  18.90   1   1     4   \n",
            "Porsche 914-2        26.0    4  120.3   91  4.43  2.140  16.70   0   1     5   \n",
            "Lotus Europa         30.4    4   95.1  113  3.77  1.513  16.90   1   1     5   \n",
            "Ford Pantera L       15.8    8  351.0  264  4.22  3.170  14.50   0   1     5   \n",
            "Ferrari Dino         19.7    6  145.0  175  3.62  2.770  15.50   0   1     5   \n",
            "Maserati Bora        15.0    8  301.0  335  3.54  3.570  14.60   0   1     5   \n",
            "Volvo 142E           21.4    4  121.0  109  4.11  2.780  18.60   1   1     4   \n",
            "\n",
            "                     carb  \n",
            "Mazda RX4               4  \n",
            "Mazda RX4 Wag           4  \n",
            "Datsun 710              1  \n",
            "Hornet 4 Drive          1  \n",
            "Hornet Sportabout       2  \n",
            "Valiant                 1  \n",
            "Duster 360              4  \n",
            "Merc 240D               2  \n",
            "Merc 230                2  \n",
            "Merc 280                4  \n",
            "Merc 280C               4  \n",
            "Merc 450SE              3  \n",
            "Merc 450SL              3  \n",
            "Merc 450SLC             3  \n",
            "Cadillac Fleetwood      4  \n",
            "Lincoln Continental     4  \n",
            "Chrysler Imperial       4  \n",
            "Fiat 128                1  \n",
            "Honda Civic             2  \n",
            "Toyota Corolla          1  \n",
            "Toyota Corona           1  \n",
            "Dodge Challenger        2  \n",
            "AMC Javelin             2  \n",
            "Camaro Z28              4  \n",
            "Pontiac Firebird        2  \n",
            "Fiat X1-9               1  \n",
            "Porsche 914-2           2  \n",
            "Lotus Europa            2  \n",
            "Ford Pantera L          4  \n",
            "Ferrari Dino            6  \n",
            "Maserati Bora           8  \n",
            "Volvo 142E              2  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UlxcLPS-m0NO"
      },
      "source": [
        "## Preview Data\n",
        "\n",
        "Use the following data dictionary to understand the attributes available\n",
        "\n",
        "|Attribute | Description |\n",
        "|---------|--------------|\n",
        "|\tmpg\t|Miles/(US) gallon|\n",
        "|\tcyl|\tNumber of cylinders|\n",
        "|\tdisp|\tDisplacement (cu.in.)|\n",
        "|hp|\tGross horsepower|\n",
        "|drat|\tRear axle ratio|\n",
        "|wt|\tWeight (1000 lbs)|\n",
        "|qsec|\t1/4 mile time|\n",
        "|vs|\tEngine (0 = V-shaped, 1 = straight)|\n",
        "|am|\tTransmission (0 = automatic, 1 = manual)|\n",
        "|gear|\tNumber of forward gears|"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gSvao0dlhlNn",
        "outputId": "40e8f1f7-9c85-418a-cbe3-42ab845481e4"
      },
      "source": [
        "#look at the top rows\n",
        "#df.tail(2) \n",
        "df.info()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 32 entries, Mazda RX4 to Volvo 142E\n",
            "Data columns (total 11 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   mpg     32 non-null     float64\n",
            " 1   cyl     32 non-null     int64  \n",
            " 2   disp    32 non-null     float64\n",
            " 3   hp      32 non-null     int64  \n",
            " 4   drat    32 non-null     float64\n",
            " 5   wt      32 non-null     float64\n",
            " 6   qsec    32 non-null     float64\n",
            " 7   vs      32 non-null     int64  \n",
            " 8   am      32 non-null     int64  \n",
            " 9   gear    32 non-null     int64  \n",
            " 10  carb    32 non-null     int64  \n",
            "dtypes: float64(5), int64(6)\n",
            "memory usage: 3.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Mk01Ip_Ehk5c",
        "outputId": "06ab2a64-3787-4980-eac3-d57028c0a280"
      },
      "source": [
        "#look at last rows\n",
        "df.tail(5) "
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 mpg  cyl   disp   hp  drat     wt  qsec  vs  am  gear  carb\n",
              "Lotus Europa    30.4    4   95.1  113  3.77  1.513  16.9   1   1     5     2\n",
              "Ford Pantera L  15.8    8  351.0  264  4.22  3.170  14.5   0   1     5     4\n",
              "Ferrari Dino    19.7    6  145.0  175  3.62  2.770  15.5   0   1     5     6\n",
              "Maserati Bora   15.0    8  301.0  335  3.54  3.570  14.6   0   1     5     8\n",
              "Volvo 142E      21.4    4  121.0  109  4.11  2.780  18.6   1   1     4     2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-da8787e3-b657-4f23-949d-ee71f91dbc80\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lotus Europa</th>\n",
              "      <td>30.4</td>\n",
              "      <td>4</td>\n",
              "      <td>95.1</td>\n",
              "      <td>113</td>\n",
              "      <td>3.77</td>\n",
              "      <td>1.513</td>\n",
              "      <td>16.9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ford Pantera L</th>\n",
              "      <td>15.8</td>\n",
              "      <td>8</td>\n",
              "      <td>351.0</td>\n",
              "      <td>264</td>\n",
              "      <td>4.22</td>\n",
              "      <td>3.170</td>\n",
              "      <td>14.5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ferrari Dino</th>\n",
              "      <td>19.7</td>\n",
              "      <td>6</td>\n",
              "      <td>145.0</td>\n",
              "      <td>175</td>\n",
              "      <td>3.62</td>\n",
              "      <td>2.770</td>\n",
              "      <td>15.5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Maserati Bora</th>\n",
              "      <td>15.0</td>\n",
              "      <td>8</td>\n",
              "      <td>301.0</td>\n",
              "      <td>335</td>\n",
              "      <td>3.54</td>\n",
              "      <td>3.570</td>\n",
              "      <td>14.6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Volvo 142E</th>\n",
              "      <td>21.4</td>\n",
              "      <td>4</td>\n",
              "      <td>121.0</td>\n",
              "      <td>109</td>\n",
              "      <td>4.11</td>\n",
              "      <td>2.780</td>\n",
              "      <td>18.6</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da8787e3-b657-4f23-949d-ee71f91dbc80')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-da8787e3-b657-4f23-949d-ee71f91dbc80 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-da8787e3-b657-4f23-949d-ee71f91dbc80');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "7Hxb10xChiAf",
        "outputId": "52dc67d3-6403-40e1-970a-63cd5004eb8c"
      },
      "source": [
        "#get a summary of the dataset\n",
        "df.describe()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             mpg        cyl        disp          hp       drat         wt  \\\n",
              "count  32.000000  32.000000   32.000000   32.000000  32.000000  32.000000   \n",
              "mean   20.090625   6.187500  230.721875  146.687500   3.596563   3.217250   \n",
              "std     6.026948   1.785922  123.938694   68.562868   0.534679   0.978457   \n",
              "min    10.400000   4.000000   71.100000   52.000000   2.760000   1.513000   \n",
              "25%    15.425000   4.000000  120.825000   96.500000   3.080000   2.581250   \n",
              "50%    19.200000   6.000000  196.300000  123.000000   3.695000   3.325000   \n",
              "75%    22.800000   8.000000  326.000000  180.000000   3.920000   3.610000   \n",
              "max    33.900000   8.000000  472.000000  335.000000   4.930000   5.424000   \n",
              "\n",
              "            qsec         vs         am       gear     carb  \n",
              "count  32.000000  32.000000  32.000000  32.000000  32.0000  \n",
              "mean   17.848750   0.437500   0.406250   3.687500   2.8125  \n",
              "std     1.786943   0.504016   0.498991   0.737804   1.6152  \n",
              "min    14.500000   0.000000   0.000000   3.000000   1.0000  \n",
              "25%    16.892500   0.000000   0.000000   3.000000   2.0000  \n",
              "50%    17.710000   0.000000   0.000000   4.000000   2.0000  \n",
              "75%    18.900000   1.000000   1.000000   4.000000   4.0000  \n",
              "max    22.900000   1.000000   1.000000   5.000000   8.0000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-291a9715-55ac-47b0-84a0-0412706c704d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpg</th>\n",
              "      <th>cyl</th>\n",
              "      <th>disp</th>\n",
              "      <th>hp</th>\n",
              "      <th>drat</th>\n",
              "      <th>wt</th>\n",
              "      <th>qsec</th>\n",
              "      <th>vs</th>\n",
              "      <th>am</th>\n",
              "      <th>gear</th>\n",
              "      <th>carb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>32.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>20.090625</td>\n",
              "      <td>6.187500</td>\n",
              "      <td>230.721875</td>\n",
              "      <td>146.687500</td>\n",
              "      <td>3.596563</td>\n",
              "      <td>3.217250</td>\n",
              "      <td>17.848750</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>0.406250</td>\n",
              "      <td>3.687500</td>\n",
              "      <td>2.8125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.026948</td>\n",
              "      <td>1.785922</td>\n",
              "      <td>123.938694</td>\n",
              "      <td>68.562868</td>\n",
              "      <td>0.534679</td>\n",
              "      <td>0.978457</td>\n",
              "      <td>1.786943</td>\n",
              "      <td>0.504016</td>\n",
              "      <td>0.498991</td>\n",
              "      <td>0.737804</td>\n",
              "      <td>1.6152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>10.400000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>71.100000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>2.760000</td>\n",
              "      <td>1.513000</td>\n",
              "      <td>14.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>15.425000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>120.825000</td>\n",
              "      <td>96.500000</td>\n",
              "      <td>3.080000</td>\n",
              "      <td>2.581250</td>\n",
              "      <td>16.892500</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>19.200000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>196.300000</td>\n",
              "      <td>123.000000</td>\n",
              "      <td>3.695000</td>\n",
              "      <td>3.325000</td>\n",
              "      <td>17.710000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>22.800000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>326.000000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>3.920000</td>\n",
              "      <td>3.610000</td>\n",
              "      <td>18.900000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>33.900000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>472.000000</td>\n",
              "      <td>335.000000</td>\n",
              "      <td>4.930000</td>\n",
              "      <td>5.424000</td>\n",
              "      <td>22.900000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>8.0000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-291a9715-55ac-47b0-84a0-0412706c704d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-291a9715-55ac-47b0-84a0-0412706c704d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-291a9715-55ac-47b0-84a0-0412706c704d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SoJLJMlceORN"
      },
      "source": [
        " \n",
        "# Create basic charts\n",
        "\n",
        "- Line chart\n",
        "- Bar chart\n",
        "- Histogram\n",
        "- Box plot\n",
        "- Scatter plot\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "hDUTvlJXdMaf",
        "outputId": "9cd4cbc5-b28e-431c-c066-9231d5fd0762"
      },
      "source": [
        "#Line chart\n",
        "df['wt'].plot.line(color='blue')"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc874b308e0>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "ZqEk5ue2kTHA",
        "outputId": "c5f766fd-2c9c-4e9d-f97a-afed617c9020"
      },
      "source": [
        "#Line chart\n",
        "df['mpg'].plot.barh(color='red', xticks=[0,10,20, 30])"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc8766730d0>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4i3cnmhkSwr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "9939988c-808c-458a-d041-b108ba7f3a61"
      },
      "source": [
        "#Histogram\n",
        "df['mpg'].plot.hist(bins=12,title='Miles Per Gallon')"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc87463b1c0>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "HxD2cW6QeQE0",
        "outputId": "f626bde8-a4f7-425e-a01c-c4a29e9f9593"
      },
      "source": [
        "#Boxplot\n",
        "df['mpg'].plot.box(color ='red', ylabel = 'MPG', title = 'MPG Box Plot')\n"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc874407040>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEICAYAAABYoZ8gAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAARTUlEQVR4nO3de7BdZX3G8e9jQLGNTsCcYgBtWq/RVMN4pCh0RlFnHB3w2tpYLbZRrFO5jNZiTTvAtFqreBnROgNCQYvxbqFInaE0jo0XaIAAwaiAkuHOQaASLYjJr3/sFT2cS05ua5+cvN/PzJ6z17vX2u9vZ+DZa7/rXWulqpAkteMRs12AJGm4DH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/NIeLsniJJVkn9muRXsHg19zQpKbkvwiycIJ7Vd1obi4Wz63W29TknuSXJLk6ePWf0qSzyUZS/LTJNcnOSPJIdP0+6Ykm7v325TkR0ne1sPne0GSLV0f9yf5QZI/24n3OTXJv+7u+rR3Mfg1l/wYWL51IcnvAb8xxXofqKr5wCHAXcC53fpPBi4DbgMOrarHAkcANwJHbqPf71TV/O49XwN8IMmhu/5xJrmt6+OxwMnAWUme0UM/apzBr7nkM8Cfjls+Fvj0dCtX1c+BzwJLu6ZTgW9V1Tuq6pZunbuq6qNV9bntKaCqrgI2AEu2tiU5Jsl1Se5L8o0kS7r2k5NctnWIJsnbuvX2m6GPqqp/A+4FJgV/koOSXNj9orkhyVu69pcC7wFe1/1yuHp7PpPaY/BrLvku8NgkS5LMA/4YmHZYI8l84E+Aq7qmFwNf3pUCkjwXeCqwtlt+KrAKOAkYAS4G/j3JI4EPAg8Cf5vkKcD7gDdU1QMz9PGIJK8CFgDXTrHK54BbgIOA1wLvS3JUVX296+Pz3S+UZ+/KZ9Xey+DXXLN1r/8lDPa8b51inb9Kch9wAzAfeFPXvhC4Y+tKSd7e7aVvSnLWNvo8vFvvfuDyrobru9deB3ytqi6pqoeA04FHA8+vqi1drScAFzIYgrpq8tv/ykFd3XcDpwBvrKofjF8hyRMYDE+dXFUPVNU64FM8/JeQtE0Gv+aazwCvZxDm0w3znF5VC6rq8VV1TFXd2LX/BFi0daWq+nhVLQA+Cuy7jT6/273fY4DHA89ksGcNg73ujePecwtwM3Bwt3wTsBpYDHxihs92W9fPAVW1bJrhp4OAe6rq/nFtG7f2J20Pg19zSlVtZHCQ92XAV3Zw80uBV+9i/3cyGC46umu6Dfjtra8nCfAEul8iSV4OPK/r+4O70ve4/g5I8phxbU/k1798vNyuZmTway5aARxVVT/bwe1OBf4gyYeTHAzQTQ9dss2txknyOOBVwHVd0xeAlyd5UZJ9gXcyGNf/dvfenwLezOBA9NFJXraDNT9MVd0MfBv4xyT7JXkWg3+Prcc67gQWJ/H/bU3L/zg051TVjVW1die2+yHw+wymeV7djdl/i8Fe9N9tY9PnbZ3Hz+C4whhwfPeePwDeAJzBYGz+aODoqvoFcCZwQVVdXFU/YRDQn+q+PHbFcgZDR7cBXwVOqar/7F77Yvf3J0mu3MV+tJeKN2KRpLa4xy9JjTH4JakxvQV/d+Dp8iRXd2crnta1n5vkx0nWdY9lfdUgSZqsz6v9Pchg5sWmbrbDmiT/0b32rqr6Uo99S5Km0Vvw1+Co8aZucd/usVNHkhcuXFiLFy/eTZVJUhuuuOKKu6tqZGJ7r7N6uuupXAE8GfhEVZ2c5FwGJ7Q8yOCklndX1YNTbHsccBzAE5/4xOds3Lhx4iqSpG1IckVVjU5s7/XgblVtrqplDOZNH5ZkKfA3wNOB5wIHMLj87FTbnllVo1U1OjIy6QtLkrSThjKrp6ruY3C9kpdW1e3dZWcfBP4FOGwYNUiSBvqc1TOSZEH3/NEMrqb4/SSLurYArwTW91WDJGmyPmf1LALO68b5HwF8oaouSvJfSUaAAOuAv+ixBknSBH3O6rkGmHR7uqo6qq8+JUkz88xdaSesWrWKpUuXMm/ePJYuXcqqVatmuyRpu/U51CPtlVatWsXKlSs5++yzOfLII1mzZg0rVqwAYPny5TNsLc2+OXF1ztHR0Vq7doevwiv1YunSpZxxxhm88IUv/FXb6tWrOf7441m/3rkK2nNMN4/f4Jd20Lx583jggQfYd99f363xoYceYr/99mPz5s2zWJn0cLNyApe0N1qyZAlr1qx5WNuaNWtYsmS7b+QlzSqDX9pBK1euZMWKFaxevZqHHnqI1atXs2LFClauXDnbpUnbxYO70g7aegD3+OOPZ8OGDSxZsoT3vve9HtjVnOEYvyTtpRzjlyQBBr8kNcfgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY3xzF1pvGQ4/cyBEye19zL4pfF2NJATQ1xzjkM9ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNaa34E+yX5LLk1yd5Lokp3Xtv5PksiQ3JPl8kkf2VYMkabI+9/gfBI6qqmcDy4CXJjkc+CfgI1X1ZOBeYEWPNUiSJugt+GtgU7e4b/co4CjgS137ecAr+6pBkjRZr2P8SeYlWQfcBVwC3AjcV1W/7Fa5BTh4mm2PS7I2ydqxsbE+y5SkpvQa/FW1uaqWAYcAhwFP34Ftz6yq0aoaHRkZ6a1GSWrNUGb1VNV9wGrgecCCJFtv8n4IcOswapAkDfQ5q2ckyYLu+aOBlwAbGHwBvLZb7Vjggr5qkCRNts/Mq+y0RcB5SeYx+IL5QlVdlOR7wOeS/ANwFXB2jzVIkiboLfir6hrg0Cnaf8RgvF+SNAs8c1eSGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhrTW/AneUKS1Um+l+S6JCd27acmuTXJuu7xsr5qkCRNtk+P7/1L4J1VdWWSxwBXJLmke+0jVXV6j31LkqbRW/BX1e3A7d3z+5NsAA7uqz9J0vYZyhh/ksXAocBlXdPbk1yT5Jwk+0+zzXFJ1iZZOzY2NowyJakJvQd/kvnAl4GTquqnwCeBJwHLGPwi+NBU21XVmVU1WlWjIyMjfZcpSc3oNfiT7Msg9M+vqq8AVNWdVbW5qrYAZwGH9VmDJOnh+pzVE+BsYENVfXhc+6Jxq70KWN9XDZKkyfqc1XME8Ebg2iTrurb3AMuTLAMKuAl4a481SJIm6HNWzxogU7x0cV99SpJm5pm7ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhqzzUs2JDkEWNxdfoEk7wDmdy9/tqpu6Lk+SdJuNtMe/weBBeOW3wr8jMEF1k7rqyhJUn9mukjb06rqonHLP6+qDwEk+e/+ypIk9WWm4N9vwvKLxj1fuJtrkXavAw6Ae+/tv59MdRHa3Wj//eGee/rtQ02ZKfjvT/LUqvohQFXdA5Dk6cD9fRcn7ZJ774Wq2a5i1/X9xaLmzBT8pwAXJXkvcGXX9hwGN1Q5sc/CJEn92GbwV9XXk7wa+GvghK55PfDqqvKWiZI0B23PHbjuBD4G3FBV9/VcjySpZ9uczpnkzcB1wBnA95McM5SqJEm9mWmP/yTgmVU1luR3gfOBC/svS5LUl5lO4PpFVY0BVNWPgEf1X5IkqU8z7fEfkuRj0y1X1QlTbCNJ2oPNFPzvmrB8RV+FSJKGY6bpnOcNqxBJ0nDMdHXObR7IrSpn+UjSHDPTUM/zgJuBVcBlgOeOS9IcN1PwPx54CbAceD3wNWBVVV3Xd2GSpH5sczpnVW2uqq9X1bHA4cANwDeSvH0o1UmSdrsZL9mQ5FHAyxns9S9mcPmGr/ZbliSpLzMd3P00sBS4GDjNC7NJ0tw30x7/GxjcavFE4IT8+rrgAaqqHttjbZKkHsw0j3+mSzpIkuYYg12SGtNb8Cd5QpLVSb6X5LokJ3btByS5JMn13d/9+6pBkjRZn3v8vwTeWVXPYDAV9C+TPAN4N3BpVT0FuLRbliQNSW/BX1W3V9WV3fP7gQ3AwcArgK3XADoPeGVfNUiSJhvKGH+SxcChDC77cGBV3d69dAdw4DTbHJdkbZK1Y2NjwyhTkprQe/AnmQ98GTipqn46/rWqKqCm2q6qzqyq0aoaHRkZ6btMSWpGr8GfZF8GoX9+VX2la74zyaLu9UXAXX3WIEl6uD5n9QQ4G9hQVR8e99KFwLHd82OBC/qqQZI02YzX6tkFRwBvBK5Nsq5rew/wfuALSVYAG4E/6rEGSdIEvQV/Va1h+uv3v6ivfiVJ2+aZu5LUmD6HeqTZF28aJ01k8GvvVlPOFp5b/PLSbuZQjyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWpMb8Gf5JwkdyVZP67t1CS3JlnXPV7WV/8SAMncf+y//2z/K2ovs0+P730u8HHg0xPaP1JVp/fYrzRQ1X8fyXD6kXaj3vb4q+qbwD19vb8kaefMxhj/25Nc0w0FTfsbNslxSdYmWTs2NjbM+iRprzbs4P8k8CRgGXA78KHpVqyqM6tqtKpGR0ZGhlWfJO31hhr8VXVnVW2uqi3AWcBhw+xfkjTk4E+yaNziq4D1060rSepHb7N6kqwCXgAsTHILcArwgiTLgAJuAt7aV/+SpKn1FvxVtXyK5rP76k+StH08c1eSGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhrTW/AnOSfJXUnWj2s7IMklSa7v/u7fV//STkl27LEz22zdTpolfe7xnwu8dELbu4FLq+opwKXdsrTnqBrOQ5pFvQV/VX0TuGdC8yuA87rn5wGv7Kt/SdLUhj3Gf2BV3d49vwM4cLoVkxyXZG2StWNjY8OpTpIaMGsHd6uqgGl/81bVmVU1WlWjIyMjQ6xMkvZuww7+O5MsAuj+3jXk/iWpecMO/guBY7vnxwIXDLl/SWpen9M5VwHfAZ6W5JYkK4D3Ay9Jcj3w4m5ZkjRE+/T1xlW1fJqXXtRXn5KkmXnmriQ1JjUHTiZJMgZsnO06pCksBO6e7SKkafx2VU2aFjkngl/aUyVZW1Wjs12HtCMc6pGkxhj8ktQYg1/aNWfOdgHSjnKMX5Ia4x6/JDXG4Jekxhj8ktQYg1+SGmPwS1NIsjjJ95Ocm+SHSc5P8uIk3+ruGX1YklOTfCbJd7q2t3TbPiLJP3fbX5Lk4iSvne3PJG3V20XapL3Ak4E/BP4c+B/g9cCRwDHAe4B1wLOAw4HfBK5K8jXg+cBi4BnAbwEbgHOGXLs0Lff4pen9uKquraotwHXApd2d465lEOwAF1TV/1XV3cBq4DAGXw5frKotVXVH1y7tMQx+aXoPjnu+ZdzyFn79a3niiTCeGKM9nsEv7ZpXJNkvyeOAFzAYEvoW8JpurP/Arl3aYzjGL+2aaxgM5SwE/r6qbkvyZQY3HPoecDNwJfC/s1ei9HBeskHaSUlOBTZV1elTvDa/qjZ1vwQuB47oxvulWecev9SPi5IsAB7J4JeAoa89hnv8ktQYD+5KUmMMfklqjMEvSY0x+CWpMQa/JDXm/wG03cpeXFqywgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        },
        "id": "eVOSIP8SeYg3",
        "outputId": "f140dfbd-60b9-4f69-850a-f11dd7ae926e"
      },
      "source": [
        "#Scatter plot\n",
        "df.plot.scatter(x='mpg',y='hp',c='gear')"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc8744cb970>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}